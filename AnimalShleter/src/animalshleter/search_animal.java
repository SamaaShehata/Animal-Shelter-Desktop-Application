/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package animalshleter;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;  
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class search_animal extends javax.swing.JFrame {

    Connection con;
    public search_animal() {
        initComponents();
        createConnection();
        fillPetNamecombo();
        fillPetbreedcombo();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        petstable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        breedscombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        petname = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        dogb = new javax.swing.JRadioButton();
        rabbitb = new javax.swing.JRadioButton();
        birdsb = new javax.swing.JRadioButton();
        catsb = new javax.swing.JRadioButton();
        dogb1 = new javax.swing.JRadioButton();
        dogb2 = new javax.swing.JRadioButton();
        dogb3 = new javax.swing.JRadioButton();
        dogb4 = new javax.swing.JRadioButton();
        dogb5 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("animal shelter");
        setMinimumSize(new java.awt.Dimension(1280, 524));
        setPreferredSize(new java.awt.Dimension(1279, 519));
        setResizable(false);
        getContentPane().setLayout(null);

        petstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "pet_name", "birth_date", "gender", "size", "color", "intake_date", "adoption_state"
            }
        ));
        jScrollPane1.setViewportView(petstable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(6, 164, 1260, 360);

        jPanel1.setBackground(new java.awt.Color(204, 153, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("search animal");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1280, 70);

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("gender");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(20, 50, 150, 44);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("size");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(390, 10, 70, 44);

        breedscombo.setMaximumRowCount(19);
        breedscombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breedscomboActionPerformed(evt);
            }
        });
        jPanel2.add(breedscombo);
        breedscombo.setBounds(530, 60, 140, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("breeds");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(390, 50, 130, 44);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("species");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(770, 10, 140, 44);

        petname.setMaximumRowCount(19);
        petname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petnameActionPerformed(evt);
            }
        });
        jPanel2.add(petname);
        petname.setBounds(220, 20, 140, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("pet name");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(20, 10, 180, 44);

        dogb.setBackground(new java.awt.Color(0, 51, 51));
        dogb.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb.setForeground(new java.awt.Color(255, 255, 255));
        dogb.setText("Large");
        dogb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogbActionPerformed(evt);
            }
        });
        jPanel2.add(dogb);
        dogb.setBounds(650, 20, 80, 31);

        rabbitb.setBackground(new java.awt.Color(0, 51, 51));
        rabbitb.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rabbitb.setForeground(new java.awt.Color(255, 255, 255));
        rabbitb.setText("rabbits");
        rabbitb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rabbitbActionPerformed(evt);
            }
        });
        jPanel2.add(rabbitb);
        rabbitb.setBounds(1000, 20, 100, 31);

        birdsb.setBackground(new java.awt.Color(0, 51, 51));
        birdsb.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        birdsb.setForeground(new java.awt.Color(255, 255, 255));
        birdsb.setText("birds");
        birdsb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                birdsbActionPerformed(evt);
            }
        });
        jPanel2.add(birdsb);
        birdsb.setBounds(1100, 20, 90, 31);

        catsb.setBackground(new java.awt.Color(0, 51, 51));
        catsb.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        catsb.setForeground(new java.awt.Color(255, 255, 255));
        catsb.setText("cats");
        catsb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catsbActionPerformed(evt);
            }
        });
        jPanel2.add(catsb);
        catsb.setBounds(1190, 20, 90, 31);

        dogb1.setBackground(new java.awt.Color(0, 51, 51));
        dogb1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb1.setForeground(new java.awt.Color(255, 255, 255));
        dogb1.setText("dogs");
        dogb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogb1ActionPerformed(evt);
            }
        });
        jPanel2.add(dogb1);
        dogb1.setBounds(920, 20, 80, 31);

        dogb2.setBackground(new java.awt.Color(0, 51, 51));
        dogb2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb2.setForeground(new java.awt.Color(255, 255, 255));
        dogb2.setText("Male");
        dogb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogb2ActionPerformed(evt);
            }
        });
        jPanel2.add(dogb2);
        dogb2.setBounds(160, 60, 80, 31);

        dogb3.setBackground(new java.awt.Color(0, 51, 51));
        dogb3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb3.setForeground(new java.awt.Color(255, 255, 255));
        dogb3.setText("Medium");
        dogb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogb3ActionPerformed(evt);
            }
        });
        jPanel2.add(dogb3);
        dogb3.setBounds(550, 20, 100, 31);

        dogb4.setBackground(new java.awt.Color(0, 51, 51));
        dogb4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb4.setForeground(new java.awt.Color(255, 255, 255));
        dogb4.setText("Female");
        dogb4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogb4ActionPerformed(evt);
            }
        });
        jPanel2.add(dogb4);
        dogb4.setBounds(250, 60, 100, 31);

        dogb5.setBackground(new java.awt.Color(0, 51, 51));
        dogb5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dogb5.setForeground(new java.awt.Color(255, 255, 255));
        dogb5.setText("Small");
        dogb5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogb5ActionPerformed(evt);
            }
        });
        jPanel2.add(dogb5);
        dogb5.setBounds(470, 20, 80, 31);

        jButton1.setText("Reset Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(770, 60, 100, 23);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 70, 1280, 450);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void birdsbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_birdsbActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 3");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_birdsbActionPerformed

    private void petnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petnameActionPerformed
        Object obj = evt.getSource();
        if (obj == petname) {

            DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where pet_name = '" + petname.getSelectedItem().toString() + "'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_petnameActionPerformed

    private void breedscomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breedscomboActionPerformed
        Object obj = evt.getSource();
        if (obj == breedscombo) {

            DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            tablemodel.getDataVector().removeAllElements();
            String state =null;
            int breedID=0;
            try {
                Statement stmt = con.createStatement();
                ResultSet rstt = stmt.executeQuery("SELECT brees_id FROM animalsshelter.breeds where breed_name = '" +breedscombo.getSelectedItem().toString()+"'");
                while (rstt.next()) {
                    breedID=rstt.getInt("brees_id");                
                }
                stmt.close();
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where breed_id = " +breedID);
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_breedscomboActionPerformed

    private void dogb5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogb5ActionPerformed
         
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where size = 'Small'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_dogb5ActionPerformed

    private void dogb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogb3ActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where size = 'Medium'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_dogb3ActionPerformed

    private void dogbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogbActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where size = 'Large'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_dogbActionPerformed

    private void dogb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogb2ActionPerformed
         DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where gender = 'Male'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_dogb2ActionPerformed

    private void dogb4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogb4ActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
           // tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where gender = 'Female'");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_dogb4ActionPerformed

    private void dogb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogb1ActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 1");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_dogb1ActionPerformed

    private void catsbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catsbActionPerformed
         DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 2");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_catsbActionPerformed

    private void rabbitbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rabbitbActionPerformed
        DefaultTableModel tablemodel = (DefaultTableModel) petstable.getModel();
            //tablemodel.getDataVector().removeAllElements();
            String state =null;
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 4");
                while (rs.next()) {
                    int adoptionStat = rs.getInt("adoption_state");
                    String name = rs.getString("pet_name");
                    String birth = rs.getString("birth_date");
                    String size = rs.getString("size");
                    String gender = rs.getString("gender");
                    String color = rs.getString("color");
                    String intake = rs.getString("intake_date");
                    
                    if(adoptionStat==0)
                        state = "Not Adopted";
                    else
                        state = "Adopted";
                    
                    tablemodel.addRow(new Object[]{name, birth, gender, size, color, intake, state});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_rabbitbActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel tablemodel =(DefaultTableModel) petstable.getModel();
        tablemodel.setRowCount(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    
     void fillPetNamecombo() {
        try {
            String sqll = "SELECT pet_name FROM animalsshelter.pets";
            PreparedStatement prep = con.prepareStatement(sqll);
            ResultSet rst = prep.executeQuery();

            while (rst.next()) {
                petname.addItem(rst.getString("pet_name"));
            }
            prep.close();
            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
     void fillPetbreedcombo() {
        try {
            String sqll = "SELECT breed_name FROM animalsshelter.breeds";
            PreparedStatement prep = con.prepareStatement(sqll);
            ResultSet rst = prep.executeQuery();

            while (rst.next()) {
                breedscombo.addItem(rst.getString("breed_name"));
            }
            prep.close();
            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
     
    
     void createConnection()
    {
         String url = "jdbc:mysql://127.0.0.1:3306/animalsshelter";
        try {
            con = DriverManager.getConnection(url, "root", "4434544345");
        } catch (SQLException ex) {
            Logger.getLogger(search_animal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(search_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(search_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(search_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(search_animal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new search_animal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton birdsb;
    private javax.swing.JComboBox<String> breedscombo;
    private javax.swing.JRadioButton catsb;
    private javax.swing.JRadioButton dogb;
    private javax.swing.JRadioButton dogb1;
    private javax.swing.JRadioButton dogb2;
    private javax.swing.JRadioButton dogb3;
    private javax.swing.JRadioButton dogb4;
    private javax.swing.JRadioButton dogb5;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> petname;
    private javax.swing.JTable petstable;
    private javax.swing.JRadioButton rabbitb;
    // End of variables declaration//GEN-END:variables

}
