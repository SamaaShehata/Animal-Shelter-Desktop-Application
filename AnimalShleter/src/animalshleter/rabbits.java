/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animalshleter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class rabbits extends javax.swing.JFrame {

    Connection con;
    public rabbits() {
        initComponents();
        
        createConnection();
        autofillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rabbitsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        breedcombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("animal shelter");
        setMinimumSize(new java.awt.Dimension(1279, 519));
        setPreferredSize(new java.awt.Dimension(1300, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        rabbitsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "pet_name", "birth_date", "gender", "size", "color", "intake_date", "adoption_state"
            }
        ));
        jScrollPane1.setViewportView(rabbitsTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(8, 136, 1260, 390);

        jPanel1.setBackground(new java.awt.Color(204, 153, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("rabbits");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1280, 70);

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("breed");

        breedcombo.setMaximumRowCount(27);
        breedcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lionhead Rabbit ", "Flemish Giant ", "Flemish Giant ", "Origi", "valverde", "Continental Giant", "Netherland Dwarf ", "Dutch Rabbit ", "English Lop ", "French Lop ", "Mini Rex ", "American Rabbit ", "Californian Rabbit", "Beveren Rabbitt ", "American Fuzzy Lop Rabbit", "American Sable Rabbit ", "Mini Rex", "American Fuzzy Lop", "Argente Brun " }));
        breedcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breedcomboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(450, 450, 450)
                .addComponent(jLabel2)
                .addGap(169, 169, 169)
                .addComponent(breedcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breedcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(393, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 70, 1280, 450);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void breedcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breedcomboActionPerformed
         Object obj = evt.getSource();
        if(obj==breedcombo)
        {
            fillTable();
        }
    }//GEN-LAST:event_breedcomboActionPerformed

       void createConnection() {
        String url = "jdbc:mysql://127.0.0.1:3306/animalsshelter";
        try {
            con = DriverManager.getConnection(url, "root", "4434544345");
        } catch (SQLException ex) {
            Logger.getLogger(rabbits.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    void fillTable() {

        DefaultTableModel tablemodel = (DefaultTableModel) rabbitsTable.getModel();
        tablemodel.getDataVector().removeAllElements();

        try {
            int breedID =0;
            String adoption = null;
            Statement state = con.createStatement();
            ResultSet rst = state.executeQuery("SELECT brees_id FROM animalsshelter.breeds where  breed_name = '"+breedcombo.getSelectedItem().toString()+"'");
            while (rst.next()) { breedID = rst.getInt("brees_id"); }
            state.close();
            rst.close();
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 4 and breed_id = "+breedID);
            while (rs.next()) {
                String rabitName = rs.getString("pet_name");
                String rabitbirth = rs.getString("birth_date");
                String rabitgendr = rs.getString("gender");
                String size = rs.getString("size");
                String color = rs.getString("color");
                String intakedate = rs.getString("intake_date");
                int adoptionstat = rs.getInt("adoption_state");
                
                if(adoptionstat==0)
                    adoption="Not Adopted";
                else 
                    adoption="Adopted";

                tablemodel.addRow(new Object[]{rabitName, rabitbirth, rabitgendr, size,color,intakedate,adoption});
            }

            stat.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(rabbits.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
     void autofillTable() {

        DefaultTableModel tablemodel = (DefaultTableModel) rabbitsTable.getModel();
        tablemodel.getDataVector().removeAllElements();

        try {
            String adoption =null;
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.pets where specie_id = 4 ");
            while (rs.next()) {
                String rabitName = rs.getString("pet_name");
                String rabitbirth = rs.getString("birth_date");
                String rabitgendr = rs.getString("gender");
                String size = rs.getString("size");
                String color = rs.getString("color");
                String intakedate = rs.getString("intake_date");
                int adoptionstat = rs.getInt("adoption_state");
                
                if(adoptionstat==0)
                    adoption="Not Adopted";
                else 
                    adoption="Adopted";

                tablemodel.addRow(new Object[]{rabitName, rabitbirth, rabitgendr, size,color,intakedate,adoption});
            }

            stat.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(rabbits.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rabbits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rabbits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rabbits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rabbits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rabbits().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> breedcombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rabbitsTable;
    // End of variables declaration//GEN-END:variables
}
