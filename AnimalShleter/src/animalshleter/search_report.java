/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animalshleter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class search_report extends javax.swing.JFrame {

    Connection con;
    public search_report() {
        initComponents();
        
        createConnection();
        fillfirstNamecombo();
        fillPetNamecombo();
        fillYears();
        fillMonths();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        years = new javax.swing.JComboBox<>();
        firsNameCombo = new javax.swing.JComboBox<>();
        lastNameCombo = new javax.swing.JComboBox<>();
        months = new javax.swing.JComboBox<>();
        daysss = new javax.swing.JComboBox<>();
        petNameCombo = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1279, 519));
        setPreferredSize(new java.awt.Dimension(1279, 519));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setLayout(null);

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "empolyee ID", "adoption ID", "adopter first name", "adopter last name", "adopter medical state", "membership Id", "pet name", "pet Id", "species", "breeds", "adoption date"
            }
        ));
        jScrollPane1.setViewportView(reportTable);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(0, 90, 1320, 360);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("adoption date");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(400, 50, 190, 29);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("adopter first name");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 0, 230, 29);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("adopter last name");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 40, 220, 29);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("pet name");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(400, 0, 120, 29);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("year");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(590, 60, 33, 22);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("species");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(670, 0, 120, 29);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("month");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(770, 60, 51, 22);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("day");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(960, 60, 28, 22);

        jPanel2.add(years);
        years.setBounds(640, 60, 120, 22);

        firsNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firsNameComboActionPerformed(evt);
            }
        });
        jPanel2.add(firsNameCombo);
        firsNameCombo.setBounds(260, 10, 120, 22);

        lastNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameComboActionPerformed(evt);
            }
        });
        jPanel2.add(lastNameCombo);
        lastNameCombo.setBounds(260, 50, 120, 22);

        months.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsActionPerformed(evt);
            }
        });
        jPanel2.add(months);
        months.setBounds(830, 60, 120, 22);

        daysss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daysssActionPerformed(evt);
            }
        });
        jPanel2.add(daysss);
        daysss.setBounds(1000, 60, 120, 22);

        petNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petNameComboActionPerformed(evt);
            }
        });
        jPanel2.add(petNameCombo);
        petNameCombo.setBounds(540, 10, 120, 22);

        jRadioButton1.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setText("cats");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jRadioButton1);
        jRadioButton1.setBounds(1020, 0, 70, 31);

        jRadioButton2.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setText("birds");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jRadioButton2);
        jRadioButton2.setBounds(950, 0, 63, 31);

        jRadioButton4.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton4.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton4.setText("dogs");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jRadioButton4);
        jRadioButton4.setBounds(780, 0, 63, 31);

        jRadioButton5.setBackground(new java.awt.Color(0, 51, 51));
        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton5.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton5.setText("rabbits");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jRadioButton5);
        jRadioButton5.setBounds(860, 0, 79, 31);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 80, 1280, 440);

        jPanel1.setBackground(new java.awt.Color(204, 153, 0));

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("search report");
        jPanel1.add(jLabel2);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1280, 80);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
                DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
        tablemodel.getDataVector().removeAllElements();
        try {
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where specie = 'Bird'");
             if(!rs.isBeforeFirst())
                JOptionPane.showMessageDialog(null, "no records for this type!");
             else{
                while (rs.next()) {

                    int adoptionID = rs.getInt("adoption_id");
                    String adoptionDate = rs.getString("adoption_date");
                    /*if(adoptionDate.isEmpty())
                    JOptionPane.showMessageDialog(null, "NO Adoption Records for Any Animal from this type.");
                     */
                    int employeeID = rs.getInt("employee_id");
                    int membership = rs.getInt("membershipID");
                    String firstName = rs.getString("adapter_first_name");
                    String lasttName = rs.getString("adapter_last_name");
                    String meddicalState = rs.getString("adapter_medical_state");
                    int petID = rs.getInt("petID");
                    String petName = rs.getString("pet_name");
                    String speices = rs.getString("specie");
                    String breed = rs.getString("breed");

                    tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                }

                stat.close();
                rs.close();
             }

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }



    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void firsNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firsNameComboActionPerformed
         Object obj = evt.getSource();
        if (obj == firsNameCombo) {
            //fillfirstNamecombo();

            fillLastNamecombo();

        }
    }//GEN-LAST:event_firsNameComboActionPerformed

    private void lastNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameComboActionPerformed
         Object obj = evt.getSource();
        if (obj == lastNameCombo) {

            DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
            tablemodel.getDataVector().removeAllElements();
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where adapter_first_name = '" + firsNameCombo.getSelectedItem().toString() + "' and adapter_last_name = '" + lastNameCombo.getSelectedItem().toString() + "'");
                while (rs.next()) {
                    int adoptionID = rs.getInt("adoption_id");
                    String adoptionDate = rs.getString("adoption_date");
                    int employeeID = rs.getInt("employee_id");
                    int membership = rs.getInt("membershipID");
                    String firstName = rs.getString("adapter_first_name");
                    String lasttName = rs.getString("adapter_last_name");
                    String meddicalState = rs.getString("adapter_medical_state");
                    int petID = rs.getInt("petID");
                    String petName = rs.getString("pet_name");
                    String speices = rs.getString("specie");
                    String breed = rs.getString("breed");

                    tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_lastNameComboActionPerformed

    private void petNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petNameComboActionPerformed
          Object obj = evt.getSource();
        if (obj == petNameCombo) {

            DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
            tablemodel.getDataVector().removeAllElements();
            try {
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where pet_name = '" + petNameCombo.getSelectedItem().toString() + "'");
                while (rs.next()) {
                    int adoptionID = rs.getInt("adoption_id");
                    String adoptionDate = rs.getString("adoption_date");
                    int employeeID = rs.getInt("employee_id");
                    int membership = rs.getInt("membershipID");
                    String firstName = rs.getString("adapter_first_name");
                    String lasttName = rs.getString("adapter_last_name");
                    String meddicalState = rs.getString("adapter_medical_state");
                    int petID = rs.getInt("petID");
                    String petName = rs.getString("pet_name");
                    String speices = rs.getString("specie");
                    String breed = rs.getString("breed");

                    tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                }

                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_petNameComboActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        
        DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
        tablemodel.getDataVector().removeAllElements();
        int adoptionID,employeeID,membership,petID;
        String adoptionDate,firstName,lasttName,meddicalState,petName,speices,breed;
        try {
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where specie = 'Dog'");
            if(!rs.isBeforeFirst())
                JOptionPane.showMessageDialog(null, "no records for this type!");
             else{
            while (rs.next()) {
                adoptionID = rs.getInt("adoption_id");
                adoptionDate = rs.getString("adoption_date");
                employeeID = rs.getInt("employee_id");
                membership = rs.getInt("membershipID");
                firstName = rs.getString("adapter_first_name");
                lasttName = rs.getString("adapter_last_name");
                meddicalState = rs.getString("adapter_medical_state");
                petID = rs.getInt("petID");
                petName = rs.getString("pet_name");
                speices = rs.getString("specie");
                breed = rs.getString("breed");

                tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});

            }
                stat.close();
                rs.close();
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
                DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
        tablemodel.getDataVector().removeAllElements();
        try {
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where specie = 'Cat'");
             if(!(rs.isBeforeFirst()))
                JOptionPane.showMessageDialog(null, "no records for this type!");
             else{
                while (rs.next()) {
                    int adoptionID = rs.getInt("adoption_id");
                    String adoptionDate = rs.getString("adoption_date");
                    int employeeID = rs.getInt("employee_id");
                    int membership = rs.getInt("membershipID");
                    String firstName = rs.getString("adapter_first_name");
                    String lasttName = rs.getString("adapter_last_name");
                    String meddicalState = rs.getString("adapter_medical_state");
                    int petID = rs.getInt("petID");
                    String petName = rs.getString("pet_name");
                    String speices = rs.getString("specie");
                    String breed = rs.getString("breed");

                    tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                }
                
                stat.close();
                rs.close();
             }
               

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
                DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
        tablemodel.getDataVector().removeAllElements();
        try {
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT * FROM animalsshelter.adoption_data where specie = 'Rabbit'");
             if(!rs.isBeforeFirst())
                JOptionPane.showMessageDialog(null, "no records for this type!");
             else{
                while (rs.next()) {
                    int adoptionID = rs.getInt("adoption_id");
                    String adoptionDate = rs.getString("adoption_date");
                    int employeeID = rs.getInt("employee_id");
                    int membership = rs.getInt("membershipID");
                    String firstName = rs.getString("adapter_first_name");
                    String lasttName = rs.getString("adapter_last_name");
                    String meddicalState = rs.getString("adapter_medical_state");
                    int petID = rs.getInt("petID");
                    String petName = rs.getString("pet_name");
                    String speices = rs.getString("specie");
                    String breed = rs.getString("breed");

                    tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                }

                stat.close();
                rs.close();
             }

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void monthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsActionPerformed
          Object obj = evt.getSource();
        if (obj == months) {
            //daysss.removeAllItems();
            fillDays();
        }
    }//GEN-LAST:event_monthsActionPerformed

    private void daysssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daysssActionPerformed
         Object obj = evt.getSource();
        if (obj == daysss) {
            /* int ddd ;
            ddd = Integer.parseInt(daysss.getSelectedItem().toString());
            System.out.println(ddd);*/
            findDate();
        }
    }//GEN-LAST:event_daysssActionPerformed

    void createConnection() {
        String url = "jdbc:mysql://127.0.0.1:3306/animalsshelter";
        try {
            con = DriverManager.getConnection(url, "root", "4434544345");
        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillfirstNamecombo() {
        try {
            String sqll = "SELECT first_name FROM animalsshelter.clients_info";
            PreparedStatement prep = con.prepareStatement(sqll);
            ResultSet rst = prep.executeQuery();

            while (rst.next()) {
                firsNameCombo.addItem(rst.getString("first_name"));

            }
            prep.close();
            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillLastNamecombo() {
        //lastNameCombo.removeAllItems();
        try {
            String sqll = "SELECT last_name FROM animalsshelter.clients_info where first_name = '" + (firsNameCombo.getSelectedItem().toString()) + "'";
            PreparedStatement prep = con.prepareStatement(sqll);
            ResultSet rst = prep.executeQuery();

            while (rst.next()) {
                lastNameCombo.addItem(rst.getString("last_name"));
            }
            prep.close();
            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillPetNamecombo() {
        try {
            String sqll = "SELECT pet_name FROM animalsshelter.pets";
            PreparedStatement prep = con.prepareStatement(sqll);
            ResultSet rst = prep.executeQuery();

            while (rst.next()) {
                petNameCombo.addItem(rst.getString("pet_name"));
            }
            prep.close();
            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void fillYears() {
        for (int i = 2010; i <= 2020; i++) {
            String yearss = null;
            years.addItem(yearss.valueOf(i));
        }
    }

    void fillMonths() {
        months.addItem("January");
        months.addItem("February");
        months.addItem("March");
        months.addItem("April");
        months.addItem("May");
        months.addItem("June");
        months.addItem("July");
        months.addItem("August");
        months.addItem("September");
        months.addItem("October");
        months.addItem("November");
        months.addItem("December");
        //fillDays();
    }

    void fillDays() {
        //daysss.removeAllItems();
        if (months.getSelectedItem().toString() == "April" || months.getSelectedItem().toString() == "June"
                || months.getSelectedItem().toString() == "September" || months.getSelectedItem().toString() == "November") {
            for (int i = 1; i <= 30; i++) {
                String dayyy = null;
                daysss.addItem(dayyy.valueOf(i));
            }
        } else if (months.getSelectedItem().toString() == "February") {
            for (int i = 1; i <= 28; i++) {
                String dayyy = null;
                daysss.addItem(dayyy.valueOf(i));
            }
        } else {
            for (int i = 1; i <= 31; i++) {
                String dayyy = null;
                daysss.addItem(dayyy.valueOf(i));
            }
        }
    }

    void findDate() {
        Calendar cal = Calendar.getInstance();
        int month, year, day;
        int myYears, myMonths, myDays;
        try {
            myYears = Integer.parseInt(years.getSelectedItem().toString());
            myMonths = monthequal();
            myDays = Integer.parseInt(daysss.getSelectedItem().toString());
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery("SELECT adoption_date FROM animalsshelter.adoption_data");
            while (rs.next()) {

                java.sql.Date dat = java.sql.Date.valueOf(rs.getString("adoption_date"));
                cal.setTime(dat);
                month = (cal.get(Calendar.MONTH)) + 1;
                day = cal.get(Calendar.DAY_OF_MONTH);
                year = cal.get(Calendar.YEAR);
                
                if (myYears == year && myMonths == month && myDays == day) {
                    DefaultTableModel tablemodel = (DefaultTableModel) reportTable.getModel();
                    tablemodel.getDataVector().removeAllElements();

                    try {
                        Statement state = con.createStatement();
                        ResultSet rst = state.executeQuery("SELECT * FROM animalsshelter.adoption_data where adoption_date = '" + rs.getString("adoption_date") + "'");
                        
                        while (rst.next()) {
                            int adoptionID = rst.getInt("adoption_id");
                            String adoptionDate = rst.getString("adoption_date");
                            int employeeID = rst.getInt("employee_id");
                            int membership = rst.getInt("membershipID");
                            String firstName = rst.getString("adapter_first_name");
                            String lasttName = rst.getString("adapter_last_name");
                            String meddicalState = rst.getString("adapter_medical_state");
                            int petID = rst.getInt("petID");
                            String petName = rst.getString("pet_name");
                            String speices = rst.getString("specie");
                            String breed = rst.getString("breed");

                            tablemodel.addRow(new Object[]{employeeID, adoptionID, firstName, lasttName, meddicalState, membership, petName, petID, speices, breed, adoptionDate});
                        }

                        state.close();
                        rst.close();
                        
                    } catch (SQLException ex) {
                       
                        Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                else if (myYears==2010&&myMonths==1&&myDays==1)
                {
                    continue;
                }
                //else
                    //JOptionPane.showMessageDialog(null, "no date found");

                     
            }

            stat.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(search_report.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    int monthequal() {
        switch (months.getSelectedItem().toString()) {
            case "January":
                return 1;
            case "February":
                return 2;
            case "March":
                return 3;
            case "April":
                return 4;
            case "May":
                return 5;
            case "June":
                return 6;
            case "July":
                return 7;
            case "August":
                return 8;
            case "September":
                return 9;
            case "October":
                return 10;
            case "November":
                return 11;
            default:
                return 12;
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(search_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(search_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(search_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(search_report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new search_report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> daysss;
    private javax.swing.JComboBox<String> firsNameCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> lastNameCombo;
    private javax.swing.JComboBox<String> months;
    private javax.swing.JComboBox<String> petNameCombo;
    private javax.swing.JTable reportTable;
    private javax.swing.JComboBox<String> years;
    // End of variables declaration//GEN-END:variables
}
